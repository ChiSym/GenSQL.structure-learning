stages:
  nullify:
    cmd: >
      clojure -X inferenceql.auto-modeling.main/nullify
      < data/data.csv
      > data/nullified.csv
    deps:
      - data/data.csv
    params:
      - nullify
    outs:
      - data/nullified.csv

  guess-schema:
    cmd: >
      clojure -X inferenceql.auto-modeling.main/guess-schema
      < data/nullified.csv
      > data/schema.edn
    deps:
      - data/nullified.csv
    params:
      - schema
    outs:
      - data/schema.edn

  cgpm-schema:
    cmd: >
      clojure -X inferenceql.auto-modeling.main/cgpm-schema
      < data/schema.edn
      > data/cgpm-schema.edn
    deps:
      - data/schema.edn
    outs:
      - data/cgpm-schema.edn

  ignore:
    cmd: >
      clojure -X inferenceql.auto-modeling.main/ignore
      :schema '"data/schema.edn"'
      < data/nullified.csv
      > data/ignored.csv
    deps:
      - data/nullified.csv
      - data/schema.edn
    outs:
      - data/ignored.csv

  numericalize:
    cmd: >
      clojure -X inferenceql.auto-modeling.main/numericalize
      :schema '"data/schema.edn"'
      :table data/mapping-table.edn
      < data/ignored.csv
      > data/numericalized.csv
    deps:
      - data/ignored.csv
      - data/schema.edn
    outs:
      - data/numericalized.csv
      - data/mapping-table.edn

  cgpm-infer-stream:
    cmd:
      - mkdir -p data/cgpm/complete
      - >-
        parallel ${parallel.flags}
        'mkdir -p data/cgpm/checkpoints/sample-{}/'
        :::: <(seq ${seed} $((${seed} + ${sample_count} - 1 )))
      - >-
        parallel ${parallel.flags}
        'python scripts/cgpm_stream.py
        --output data/cgpm/complete/sample.{}.json
        --data data/numericalized.csv
        --schema data/cgpm-schema.edn
        --mapping-table data/mapping-table.edn
        --seed {}'
        :::: <(seq ${seed} $((${seed} + ${sample_count} - 1 )))
    params:
      - parallel.flags
      - sample_count
      - seed
    deps:
      - data/cgpm-schema.edn
      - data/mapping-table.edn
      - data/numericalized.csv
      - schemas/cgpm.json
      - scripts/cgpm_stream.py
      - scripts/inf_prog.py
    outs:
      - data/cgpm/complete
      - data/cgpm/checkpoints

  summarize-checkpoints:
    cmd:
      - mkdir -p data/cgpm/transitions
      - >-
        parallel ${parallel.flags}
        'jq -s "." {1}/t-*.json > data/cgpm/transitions/{/}.json'
        :::: <(find data/cgpm/checkpoints/sample-* -type d)
    deps:
      - data/cgpm/checkpoints
    outs:
      - data/cgpm/transitions/

  diff-checkpoints:
    cmd:
      - mkdir -p data/cgpm/patches/
      - >-
        parallel ${parallel.flags}
        'bin/patches.js {1} > data/cgpm/patches/transitions.patches-{2}.json'
        :::: <(find data/cgpm/transitions -type f)
        ::::+ <(find data/cgpm/transitions -type f | cut -d/ -f4 | grep -o -E '[0-9]+')
    deps:
      - data/cgpm/transitions
    outs:
      - data/cgpm/patches

  ## Stages related to dependencies between columns.

  save-dependencies:
    cmd:
      - mkdir -p data/dep-prob/
      - >-
        parallel ${parallel.flags}
        'python scripts/dep_prob.py
        --data data/numericalized.csv
        --output data/dep-prob/{/} {}'
        :::: <(find data/cgpm/complete -type f)
    deps:
      - data/cgpm/complete
    outs:
      - data/dep-prob

  save-correlations:
    cmd: >
      python scripts/correlation.py
      --data data/ignored.csv
      --schema data/schema.edn
      --output data/correlation.json
    deps:
      - data/ignored.csv
      - data/schema.edn
      - scripts/correlation.py
    outs:
      - data/correlation.json

  ## Stages related to converting CGPM models to different model formats.

  sppl-import:
    desc: "Imports the final CGPM Crosscat samples as sum-product networks."
    cmd:
      - >-
        parallel ${parallel.flags}
        jsonschema --instance {} schemas/cgpm.json
        :::: <(find data/cgpm/complete -type f)
      - mkdir -p data/sppl/unmerged
      - >-
        parallel ${parallel.flags}
        'python scripts/sppl_import.py
        --metadata {}
        --data data/numericalized.csv
        --mapping-table data/mapping-table.edn
        --output data/sppl/unmerged/{/}'
        :::: <(find data/cgpm/complete -type f)
    params:
      - parallel.flags
    deps:
      - data/cgpm/complete
      - data/ignored.csv
      - scripts/sppl_import.py
    outs:
      - data/sppl/unmerged

  sppl-merge:
    desc: "Merges sum-product networks from final Crosscat samples into a single network."
    cmd: >
      find data/sppl/unmerged -type f |
      sort |
      xargs python scripts/sppl_merge.py
      --output data/sppl/merged.json
    deps:
      - data/sppl/unmerged
    outs:
      - data/sppl/merged.json

  sppl-import-checkpoints:
    desc: "Imports CGPM Crosscat checkpoints as SPN checkpoints."
    cmd:
      - >-
        parallel jsonschema --instance {} schemas/cgpm.json
        :::: <(find data/cgpm/checkpoints/sample-* -type f)
      - >-
        parallel mkdir -p data/sppl/checkpoints/{}
        :::: <(find data/cgpm/checkpoints/sample-* -type d | cut -d/ -f4)
      - >-
        parallel $(bin/param parallel.flags)
        'python3 scripts/sppl_import_check.py
        --metadata {1}
        --data data/numericalized.csv
        --mapping-table data/mapping-table.edn
        --output data/sppl/checkpoints/{2}'
        :::: <(find data/cgpm/checkpoints/sample-* -type f)
        ::::+ <(find data/cgpm/checkpoints/sample-* -type f | cut -d/ -f4-5)
    params:
      - parallel.flags
    deps:
      - data/cgpm/checkpoints
      - data/ignored.csv
      - scripts/sppl_import_check.py
    outs:
      - data/sppl/checkpoints/

  xcat-complete-import:
    desc: "Imports the final CGPM Crosscat samples as XCat records."
    cmd:
      - mkdir -p data/xcat/complete/
      - >-
        parallel ${parallel.flags}
        'clojure -X:xcat-import
        :cgpm-json {}
        :data-csv data/nullified.csv
        :mapping-table data/mapping-table.edn
        :numericalized-csv data/numericalized.csv
        :schema-edn data/schema.edn
        > data/xcat/complete/{/.}.edn'
        :::: <(find data/cgpm/complete -type f)
    params:
      - parallel.flags
    deps:
      - data/cgpm/complete
      - data/mapping-table.edn
      - data/nullified.csv
      - data/numericalized.csv
      - data/schema.edn
      - src/inferenceql/auto_modeling/xcat.clj
    outs:
      - data/xcat/complete/

  ## Stages related to calculating mutual information between columns (for each SPN
  ## representing an iteration of a Crosscat model).

  sppl-mi:
    desc: "Calculates MI from each SPN checkpoint."
    cmd:
      - >-
        parallel mkdir -p data/sppl/mi/checkpoints/{}
        :::: <(find data/sppl/checkpoints/sample-* -type d | cut -d/ -f4)
      - >-
        parallel $(bin/param parallel.flags)
        'python scripts/sppl_mi.py
        --model {1}
        --data data/ignored.csv
        --mapping-table data/mapping-table.edn
        --seed {2}
        --output data/sppl/mi/checkpoints/{3}'
        :::: <(find data/sppl/checkpoints/sample-* -type f)
        ::::+ <(find data/sppl/checkpoints/sample-* -type f | cut -d/ -f4 | grep -o -E '[0-9]+')
        ::::+ <(find data/sppl/checkpoints/sample-* -type f | cut -d/ -f4-5)
    params:
      - parallel.flags
      - mi.configs
    deps:
      - data/ignored.csv
      - data/sppl/checkpoints
      - data/mapping-table.edn
      - scripts/sppl_import_check.py
    outs:
      - data/sppl/mi/checkpoints/

  sppl-mi-merge:
    desc: "Merges MI outputs from SPN checkpoints corresponding to a single CrossCat sample."
    cmd:
      - mkdir -p data/sppl/mi/transitions/
      - >-
        parallel "jq --slurp '.' {1}/t-*.json > data/sppl/mi/transitions/{2}.json"
        :::: <(find data/sppl/mi/checkpoints/sample-* -type d)
        ::::+ <(find data/sppl/mi/checkpoints/sample-* -type d | cut -d/ -f5)
    deps:
      - data/sppl/mi/checkpoints/
    outs:
      - data/sppl/mi/transitions/

  sppl-mi-merge-phase-2:
    desc: "Merges MI outputs from multiple CrossCat samples."
    cmd: >
      jq --slurp '.' data/sppl/mi/transitions/sample-*.json >  data/sppl/mi/transitions-merged.json
    deps:
      - data/sppl/mi/transitions/
    outs:
      - data/sppl/mi/transitions-merged.json

  ## QC-related stages.

  sppl-sample:
    cmd: >
      python scripts/sppl_sample.py
      --model data/sppl/merged.json
      --data data/ignored.csv
      --sample_count $(bin/param qc.sample_count)
      > qc/samples/samples-virtual.edn
    deps:
      - data/sppl/merged.json
      - data/ignored.csv
    outs:
      - qc/samples/samples-virtual.edn

  qc-tag-samples:
    cmd: >
      clojure -X inferenceql.auto-modeling.qc.samples/tag
      :data data/ignored.csv
      :schema data/schema.edn
      :samples-virtual qc/samples/samples-virtual.edn
      > qc/samples/samples.edn
    deps:
      - data/ignored.csv
      - data/schema.edn
      - qc/samples/samples-virtual.edn
      - src/inferenceql/auto_modeling/qc/samples.clj
    outs:
      - qc/samples/samples.edn

  qc-dashboard-spec:
    cmd: >
      clojure -X inferenceql.auto-modeling.qc.dashboard/spec
      :samples qc/samples/samples.edn
      :schema data/schema.edn
      :correlation data/correlation.json
      > qc/specs/qc-dashboard.vl.json
    params:
      - qc.columns
    deps:
      - qc/samples/samples.edn
      - data/schema.edn
      - data/correlation.json
      - src/inferenceql/auto_modeling/qc/dashboard.clj
      - src/inferenceql/auto_modeling/qc/util.clj
    outs:
      - qc/specs/qc-dashboard.vl.json

  qc-dashboard-app:
    cmd: >
      clojure -X inferenceql.auto-modeling.qc.app/create
      :template qc/templates/index.html
      :spec qc/specs/qc-dashboard.vl.json
      :renderer canvas
      :title '"QC dashboard"'
      > qc/app/qc-dashboard.html
    deps:
      - qc/templates/index.html
      - qc/specs/qc-dashboard.vl.json
      - src/inferenceql/auto_modeling/qc/app.clj
    outs:
      - qc/app/qc-dashboard.html

  qc-splom-spec:
    cmd: >
      clojure -X inferenceql.auto-modeling.qc.splom/spec
      :samples qc/samples/samples.edn
      :schema data/schema.edn
      :correlation data/correlation.json
      > qc/specs/qc-splom.vl.json
    params:
      - qc.columns
    deps:
      - qc/samples/samples.edn
      - data/schema.edn
      - data/correlation.json
      - src/inferenceql/auto_modeling/qc/splom.clj
      - src/inferenceql/auto_modeling/qc/util.clj
    outs:
      - qc/specs/qc-splom.vl.json

  qc-splom-app:
    cmd: >
      clojure -X inferenceql.auto-modeling.qc.app/create
      :template qc/templates/index.html
      :spec qc/specs/qc-splom.vl.json
      :renderer canvas
      :title '"QC scatter plot matrix"'
      > qc/app/qc-splom.html
    deps:
      - qc/templates/index.html
      - qc/specs/qc-splom.vl.json
      - src/inferenceql/auto_modeling/qc/app.clj
    outs:
      - qc/app/qc-splom.html
