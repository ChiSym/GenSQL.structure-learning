stages:
  data-cleaning:
    cmd: python pds_data_cleaning/scripts/merge_studies.py
    deps:
      - pds_data_cleaning/data
      - pds_data_cleaning/processed_data
    outs:
      - data/data.csv

  subsample:
    cmd: >
      mkdir -p data/test &&
      python scripts/subsample.py
      --data data/data.csv
      --test-data-dir data/test
      --params params.yaml
      --output data/subsampled.csv
    deps:
      - data/data.csv
      - scripts/subsample.py
    params:
      - sub_sample
      - seed
    outs:
      - data/subsampled.csv
      - data/test

  validate-column-names:
    cmd: bin/validate.sh
    deps:
      - data/subsampled.csv
    outs:
      - data/validated.csv

  nullify:
    cmd: >
      clojure -X inferenceql.auto-modeling.main/nullify
      < data/validated.csv
      > data/nullified.csv
    deps:
      - data/validated.csv
    params:
      - nullify
    outs:
      - data/nullified.csv

  guess-schema:
    cmd: >
      clojure -X inferenceql.auto-modeling.main/guess-schema
      < data/nullified.csv
      > data/schema.edn
    deps:
      - data/nullified.csv
    params:
      - schema
    outs:
      - data/schema.edn

  cgpm-schema:
    cmd: >
      clojure -X inferenceql.auto-modeling.main/cgpm-schema
      < data/schema.edn
      > data/cgpm-schema.edn
    deps:
      - data/schema.edn
    outs:
      - data/cgpm-schema.edn

  ignore:
    cmd: >
      clojure -X inferenceql.auto-modeling.main/ignore
      :schema '"data/schema.edn"'
      < data/nullified.csv
      > data/ignored.csv
    deps:
      - data/nullified.csv
      - data/schema.edn
    outs:
      - data/ignored.csv

  numericalize:
    cmd: >
      clojure -X inferenceql.auto-modeling.main/numericalize
      :schema '"data/schema.edn"'
      :table data/mapping-table.edn
      < data/ignored.csv
      > data/numericalized.csv
    deps:
      - data/ignored.csv
      - data/schema.edn
    outs:
      - data/numericalized.csv
      - data/mapping-table.edn

  loom-schema:
    cmd: >
      clojure -X inferenceql.auto-modeling.main/loom-schema
      < data/schema.edn
      > data/loom-schema.json
    deps:
      - data/schema.edn
    outs:
      - data/loom-schema.json

  loom-ingest:
    cmd: ./bin/loom_task ingest loom data/loom-schema.json data/numericalized.csv
    deps:
      - data/loom-schema.json
      - data/numericalized.csv
    outs:
      - loom/ingest
      - loom/query

  loom-infer-config:
    cmd: >
      clojure -X inferenceql.auto-modeling.main/infer-config
      < params.yaml
      > data/infer-config.json
    params:
      - loom.extra_passes
      - seed
    outs:
      - data/infer-config.json

  loom-infer:
    cmd: ./bin/loom_task infer loom ${sample_count} data/infer-config.json
    deps:
      - loom/ingest
      - loom/query
      - data/infer-config.json
    params:
      - sample_count
    outs:
      - loom/samples

  loom-dump-metadata:
    cmd: >
      mkdir -p data/cgpm/raw &&
      find loom/samples -mindepth 1 -maxdepth 1 -type d |
      parallel ${parallel.flags}
      ./bin/loom python scripts/loom_dump.py {}
      --output data/cgpm/raw/{/}.json
    params:
      - parallel.flags
    deps:
      - loom/samples
      - scripts/loom_dump.py
    outs:
      - data/cgpm/raw

  cgpm-hydrate-metadata:
    cmd: >
      find data/cgpm/raw -type f |
      parallel jsonschema --instance {} schemas/cgpm.json &&
      mkdir -p data/cgpm/hydrated &&
      rm -f data/cgpm/inf.log &&
      find data/cgpm/raw -type f |
      sort |
      parallel ${parallel.flags}
      'python scripts/cgpm_hydrate.py
      --output data/cgpm/hydrated/{/}
      --data data/numericalized.csv
      --schema data/cgpm-schema.edn
      --mapping-table data/mapping-table.edn
      --seed $((${seed} + {#} - 1))'
    params:
      - parallel.flags
      - seed
    deps:
      - data/cgpm-schema.edn
      - data/cgpm/raw
      - data/mapping-table.edn
      - data/numericalized.csv
      - schemas/cgpm.json
      - scripts/cgpm_hydrate.py
    outs:
      - data/cgpm/hydrated

  cgpm-infer-hyperparameters:
    cmd: >
      find data/cgpm/hydrated -type f |
      parallel jsonschema --instance {} schemas/cgpm.json &&
      mkdir -p data/cgpm/complete &&
      echo ${cgpm.minutes} >> data/cgpm/inf.log &&
      find data/cgpm/hydrated -type f |
      sort |
      parallel ${parallel.flags}
      'python scripts/cgpm_infer.py {}
      --kernel alpha
      --kernel view_alphas
      --kernel column_hypers
      --kernel rows
      --kernel columns
      --output data/cgpm/complete/{/}
      --seed $((${seed} + {#} - 1))
      --minutes ${cgpm.minutes}'
      #--iterations ${cgpm.iterations}
    params:
      - parallel.flags
      - seed
      - cgpm
    deps:
      - data/cgpm/hydrated
      - scripts/cgpm_infer.py
    outs:
      - data/cgpm/complete

  save-dependencies:
    cmd: >
      find data/cgpm/complete -type f |
      sort |
      xargs python scripts/dep_prob.py
      --data data/numericalized.csv
      --output data/dep-prob.json
    deps:
      - data/cgpm/complete
    outs:
      - data/dep-prob.json

  save-max-number-views:
    cmd: >
      find data/cgpm/complete -type f |
      xargs python scripts/save_n_views.py
      >> data/max-number-views.txt
    deps:
      - data/cgpm/complete
    outs:
      - data/max-number-views.txt

  dep-prob-vl:
    cmd: >
      clojure -X inferenceql.auto-modeling.heatmap/vega-lite
      :stats-path '"data/dep-prob.json"'
      :domain '[0.0 1.0]'
      :default 1.0
      :name '"crosscat"'
      :scheme '"blues"'
      > data/dep-prob.vl.json
    deps:
      - data/dep-prob.json
      - src/clojure/inferenceql/auto_modeling/heatmap.clj
    outs:
      - data/dep-prob.vl.json

  dep-prob-vg:
    cmd: >
      pnpm vl2vg
      < data/dep-prob.vl.json
      > data/dep-prob.vg.json
    deps:
      - data/dep-prob.vl.json
    outs:
      - data/dep-prob.vg.json

  dep-prob-svg:
    cmd: >
      pnpm vg2svg
      < data/dep-prob.vg.json
      > data/dep-prob.svg
    deps:
      - data/dep-prob.vg.json
    outs:
      - data/dep-prob.svg

  save-linear-stats:
    cmd: >
      python scripts/linear_stats.py
      --data data/ignored.csv
      --schema data/schema.edn
      --output data/linear-stats.json
    deps:
      - data/ignored.csv
      - data/schema.edn
      - scripts/linear_stats.py
    outs:
      - data/linear-stats.json

  linear-stats-vl:
    cmd: >
      clojure -X inferenceql.auto-modeling.heatmap/vega-lite
      :stats-path '"data/linear-stats.json"'
      :sort-path '"data/dep-prob.json"'
      :domain '[1.0 0.0]'
      :default 0.0
      :name '"statistics"'
      :field '"p-value"'
      :scheme '"oranges"'
      > data/linear-stats.vl.json
    deps:
      - data/linear-stats.json
      - data/dep-prob.json
      - src/clojure/inferenceql/auto_modeling/heatmap.clj
    outs:
      - data/linear-stats.vl.json

  linear-stats-vg:
    cmd: >
      pnpm vl2vg
      < data/linear-stats.vl.json
      > data/linear-stats.vg.json
    deps:
      - data/linear-stats.vl.json
    outs:
      - data/linear-stats.vg.json

  linear-stats-svg:
    cmd: >
      pnpm vg2svg
      < data/linear-stats.vg.json
      > data/linear-stats.svg
    deps:
      - data/linear-stats.vg.json
    outs:
      - data/linear-stats.svg
  compare-dep-prob-with-linear:
    desc: "Compares results from dependency probability with standard statistical tests"
    cmd: >
      python scripts/compare_deps.py
      --deps data/dep-prob.json
      --linear data/linear-stats.json
      >> data/qc-statistical-tests.txt
    deps:
      - data/dep-prob.json
      - data/linear-stats.json
    outs:
      - data/qc-statistical-tests.txt

  ast-export:
    desc: "Exports ASTs of the parametric model programs resulting from truncating CGPM-CrossCat models."
    cmd:
      - >-
        parallel ${parallel.flags}
        jsonschema --instance {} schemas/cgpm.json
        :::: <(find data/cgpm/complete -type f)
      - mkdir -p data/ast
      - >-
        parallel ${parallel.flags}
        'python scripts/ast_export.py
        --metadata {}
        --data data/numericalized.csv
        --mapping-table data/mapping-table.edn
        --output data/ast/{/.}.edn'
        :::: <(find data/cgpm/complete -type f)
    params:
      - parallel.flags
    deps:
      - data/cgpm/complete
      - data/ignored.csv
      - scripts/ast_export.py
    outs:
      - data/ast

  write-gen-programs:
    deps:
      - data/ast
    outs:
      - data/code
    cmd:
      - mkdir -p data/code
      - >-
        parallel ${parallel.flags}
        'clojure -X inferenceql.auto-modeling.code/pprint-string
        :path \"{}\"
        > data/code/{/.}.clj'
        :::: <(find data/ast -type f)

  sppl-import:
    desc: "Imports a Multi-Mix AST and exports it AS a sum-product network"
    cmd:
      - mkdir -p data/sppl/unmerged
      - >-
        parallel ${parallel.flags}
        'python scripts/sppl_import.py
        --multi-mix-ast {}
        --max-number-views data/max-number-views.txt
        --output data/sppl/unmerged/{/.}.json'
        :::: <(find data/ast -type f)
    params:
      - parallel.flags
    deps:
      - data/ast
      - data/max-number-views.txt
      - scripts/sppl_import.py
    outs:
      - data/sppl/unmerged

  sppl-merge:
    cmd: >
      find data/sppl/unmerged -type f |
      sort |
      xargs python scripts/sppl_merge.py
      --output data/sppl/merged.json
    deps:
      - data/sppl/unmerged
    outs:
      - data/sppl/merged.json

  sppl-sample:
    cmd: >
      python scripts/sppl_sample.py
      --model data/sppl/merged.json
      --data data/ignored.csv
      > data/synthetic-data-iql.csv
      # --sample_count ${qc.sample_count}
    deps:
      - scripts/sppl_sample.py
      - data/sppl/merged.json
      - data/ignored.csv
    outs:
      - data/synthetic-data-iql.csv

  ctgan-train-sample:
    cmd: >
      python inferenceql_auto_modeling/train_baselines.py
      --model ctgan
      --data data/ignored.csv
    deps:
      - data/ignored.csv
    outs:
      - data/synthetic-data-ctgan.csv

  copula-train-sample:
    cmd: >
      python inferenceql_auto_modeling/train_baselines.py
      --model copula
      --data data/ignored.csv
    deps:
      - data/ignored.csv
    outs:
      - data/synthetic-data-copula.csv

  qc-tag-samples:
    cmd: >
      clojure -X inferenceql.auto-modeling.qc.samples/tag
      :data data/ignored.csv
      :samples-synthetic data/synthetic-data-iql.csv
      > qc/samples/samples.edn
    deps:
      - data/ignored.csv
      - data/synthetic-data-iql.csv
      - src/clojure/inferenceql/auto_modeling/qc/samples.clj
    outs:
      - qc/samples/samples.edn

  marginal-fits-iql:
    cmd: >
      mkdir -p qc/marginals &&
      python scripts/marginal_fit_metrics.py
      --model iql
      --real_data data/ignored.csv
    deps:
      - data/ignored.csv
      - data/synthetic-data-iql.csv
    outs:
      - qc/marginals/iql_1d_fits.csv
      - qc/marginals/iql_2d_fits.csv
      - qc/marginals/iql_worst_1d_fit.html
      - qc/marginals/iql_worst_2d_fit.html

  marginal-fits-ctgan:
    cmd: >
      mkdir -p qc/marginals &&
      python scripts/marginal_fit_metrics.py
      --model ctgan
      --real_data data/ignored.csv
    deps:
      - data/ignored.csv
      - data/synthetic-data-ctgan.csv
    outs:
      - qc/marginals/ctgan_1d_fits.csv
      - qc/marginals/ctgan_2d_fits.csv
      - qc/marginals/ctgan_worst_1d_fit.html
      - qc/marginals/ctgan_worst_2d_fit.html

  marginal-fits-copula:
    cmd: >
      mkdir -p qc/marginals &&
      python scripts/marginal_fit_metrics.py
      --model copula
      --real_data data/ignored.csv
    deps:
      - data/ignored.csv
      - data/synthetic-data-copula.csv
    outs:
      - qc/marginals/copula_1d_fits.csv
      - qc/marginals/copula_2d_fits.csv
      - qc/marginals/copula_worst_1d_fit.html
      - qc/marginals/copula_worst_2d_fit.html

  xcat-complete-import:
    desc: "Imports the final CGPM Crosscat samples as XCat records."
    cmd:
      - mkdir -p data/xcat/complete/
      - >-
        parallel ${parallel.flags}
        'clojure -X inferenceql.auto-modeling.xcat/import
        :cgpm-json {}
        :data-csv data/ignored.csv
        :mapping-table data/mapping-table.edn
        :numericalized-csv data/numericalized.csv
        :schema-edn data/schema.edn
        > data/xcat/complete/{/.}.edn'
        :::: <(find data/cgpm/complete -type f)
    params:
      - parallel.flags
    deps:
      - data/cgpm/complete
      - data/mapping-table.edn
      - data/ignored.csv
      - data/numericalized.csv
      - data/schema.edn
      - src/clojure/inferenceql/auto_modeling/xcat.clj
    outs:
      - data/xcat/complete/

  qc-dashboard-spec:
    cmd: >
      clojure -X inferenceql.auto-modeling.qc.dashboard/spec
      :samples qc/samples/samples.edn
      :schema data/schema.edn
      :correlation data/linear-stats.json
      > qc/specs/qc-dashboard.vl.json
    params:
      - qc.columns
    deps:
      - qc/samples/samples.edn
      - data/schema.edn
      - data/linear-stats.json
      - src/clojure/inferenceql/auto_modeling/qc/dashboard.clj
      - src/clojure/inferenceql/auto_modeling/qc/util.clj
    outs:
      - qc/specs/qc-dashboard.vl.json

  qc-dashboard-app:
    cmd: >
      clojure -X inferenceql.auto-modeling.qc.app/create
      :template qc/templates/index.html
      :spec qc/specs/qc-dashboard.vl.json
      :renderer canvas
      :title '"QC dashboard"'
      > qc/app/qc-dashboard.html
    deps:
      - qc/templates/index.html
      - qc/specs/qc-dashboard.vl.json
      - src/clojure/inferenceql/auto_modeling/qc/app.clj
    outs:
      - qc/app/qc-dashboard.html

  qc-splom-spec:
    cmd: >
      clojure -X inferenceql.auto-modeling.qc.splom/spec
      :samples qc/samples/samples.edn
      :schema data/schema.edn
      :correlation data/linear-stats.json
      > qc/specs/qc-splom.vl.json
    params:
      - qc.columns
    deps:
      - qc/samples/samples.edn
      - data/schema.edn
      - data/linear-stats.json
      - src/clojure/inferenceql/auto_modeling/qc/splom.clj
      - src/clojure/inferenceql/auto_modeling/qc/util.clj
    outs:
      - qc/specs/qc-splom.vl.json

  qc-splom-app:
    cmd: >
      clojure -X inferenceql.auto-modeling.qc.app/create
      :template qc/templates/index.html
      :spec qc/specs/qc-splom.vl.json
      :renderer canvas
      :title '"QC scatter plot matrix"'
      > qc/app/qc-splom.html
    deps:
      - qc/templates/index.html
      - qc/specs/qc-splom.vl.json
      - src/clojure/inferenceql/auto_modeling/qc/app.clj
    outs:
      - qc/app/qc-splom.html

  predict:
      cmd: >
        python scripts/predict.py
        --schema data/schema.edn
        --training data/ignored.csv
        --training data/synthetic-data-iql.csv
        --test data/test/test.csv
        --output data/predictions.csv
        #--test data/test/test-shifted.csv
      params:
        - synthetic_data_evaluation
      deps:
        - scripts/predict.py
        - data/schema.edn
        - data/ignored.csv
        - data/synthetic-data-iql.csv
        - data/test/test.csv
        #- data/test/test-shifted.csv
      outs:
        - data/predictions.csv
