plots:
- qc/cgpm-hydrated-dependence-probability.csv:
    template: resources/dependence_probability.json
    y: column1
    x: column2
- qc/marginals/1d_fits.csv:
    template: resources/marginal_fits.json
    y: Score
    x: idx
- qc/marginals/2d_fits.csv:
    template: resources/marginal_fits.json
    y: Score
    x: idx

stages:
  preprocess:
    cmd: >
      poetry run preprocess
      --data data/data.csv
      --sql "${sql_preprocessing}"
      --n_test ${n_test}
      --column_model_output data/column_models.json
    deps:
    - data/data.csv
    outs:
    - data/train.csv
    - data/test.csv
    - data/train.parquet
    - data/test.parquet
    - data/column_models.json
    
  impute:
    cmd: >
      poetry run impute
      --data data/train.parquet
      --output data/imputed-train.parquet
    deps:
    - data/train.parquet
    outs:
    - data/imputed-train.parquet

  loom-schema:
    cmd: >
      poetry run loom_schema
      --column_models data/column_models.json
      --output data/loom-schema.json
    deps:
    - data/column_models.json
    outs:
    - data/loom-schema.json

  loom-ingest:
    cmd: ./bin/loom_task ingest loom data/loom-schema.json data/train.csv
    deps:
    - data/loom-schema.json
    - data/train.csv
    outs:
    - loom/ingest
    - loom/query

  loom-infer-config:
    cmd: >
      yq -o=json '.loom' params.yaml
      > data/infer-config.json
    outs:
    - data/infer-config.json

  loom-infer:
    cmd: ./bin/loom_task infer loom ${sample_count} data/infer-config.json
    deps:
    - loom/ingest
    - loom/query
    - data/infer-config.json
    params:
    - sample_count
    outs:
    - loom/samples

  loom-to-json:
    cmd: >
      find loom/samples -type f ! -name '*.json' |
      parallel  "./bin/loom python scripts/loom_to_json.py loom_to_json {}"
    deps:
    - loom/samples
    outs:
    - loom/samples_json

  loom-sample:
    cmd: >
      ./bin/loom python scripts/loom_sample.py
      --sample_count ${qc.sample_count}
      --output data/synthetic-data-loom.csv
    deps:
    - loom/samples
    - scripts/loom_sample.py
    outs:
    - data/synthetic-data-loom.csv
  
  loom-samples-to-parquet:
    cmd: >
      poetry run csv-to-parquet
      --filename data/synthetic-data-loom.csv
      --column_models data/column_models.json
    deps:
    - data/synthetic-data-loom.csv
    outs:
    - data/synthetic-data-loom.parquet

  loom-to-cgpm:
    cmd: >
      mkdir -p data/cgpm/hydrated &&
      ls loom/samples |
      parallel  "poetry run loom_to_cgpm
      --column_model_filename data/column_models.json
      --data_filename data/train.parquet
      --loom_folder loom/samples_json/{}
      --out_filename data/cgpm/hydrated/{}.json"
    deps:
    - loom/samples_json
    - data/column_models.json
    - data/train.parquet
    outs:
    - data/cgpm/hydrated

  cgpm-sample:
    foreach:
    - hydrated
    do:
      cmd: >
        poetry run cgpm-sample
        --sample_count ${qc.sample_count}
        --data data/train.parquet
        --cgpm-model ${item}
      deps:
      - data/cgpm/${item}
      - data/train.parquet
      outs:
      - data/synthetic-data-cgpm-${item}.csv
      - data/synthetic-data-cgpm-${item}.parquet

  cgpm-to-sppl:
    cmd: >
      poetry run cgpm-to-sppl
      --output data/sppl/merged.json
      --model_dir data/cgpm/hydrated
      --data data/train.parquet
    deps:
    - data/train.parquet
    - data/cgpm/hydrated
    outs:
    - data/sppl/merged.json

  sample-sppl:
    cmd: >
      poetry run sample-sppl
      --sample_count ${qc.sample_count}
      --output data/synthetic-data-sppl-hydrated.csv
      --model data/sppl/merged.json
    deps:
    - data/sppl/merged.json
    outs:
    - data/synthetic-data-sppl-hydrated.csv
  
  train-baseline:
    foreach:
    - ctgan
    - tvae
    do:
      cmd: >
        poetry run train-baseline
        --data data/imputed-train.parquet
        --model ${item}
      deps:
      - data/imputed-train.csv
      outs:
      - data/${item}.pkl

  sample-baseline:
    foreach:
    - ctgan
    - tvae
    do:
      cmd: >
        poetry run sample-baseline
        --model ${item}
        --sample_count ${qc.sample_count}
      deps:
        - data/${item}.pkl
      outs:
        - data/synthetic-data-${item}.csv
        - data/synthetic-data-${item}.parquet

  discretize: 
    cmd: > 
      poetry run discretize
      --quantiles ${qc.discretization_quantiles}
      --model loom
      --model cgpm-hydrated
      --model sppl-hydrated 
      --model ctgan 
      --model tvae 
    deps: 
      - data/test.parquet
      - data/synthetic-data-loom.parquet
      - data/synthetic-data-cgpm-hydrated.parquet
      - data/synthetic-data-sppl-hydrated.parquet
      - data/synthetic-data-ctgan.parquet
      - data/synthetic-data-tvae.parquet
    outs:
      - data/discretized-test.parquet
      - data/discretized-synthetic-data-loom.parquet
      - data/discretized-synthetic-data-cgpm-hydrated.parquet
      - data/discretized-synthetic-data-sppl-hydrated.parquet
      - data/discretized-synthetic-data-ctgan.parquet
      - data/discretized-synthetic-data-tvae.parquet
      - data/discretized-test.csv
      - data/discretized-synthetic-data-loom.csv
      - data/discretized-synthetic-data-cgpm-hydrated.csv
      - data/discretized-synthetic-data-sppl-hydrated.csv
      - data/discretized-synthetic-data-ctgan.csv
      - data/discretized-synthetic-data-tvae.csv


  make-marginal-dir:
    cmd: mkdir -p qc/marginals

  marginal-fits:
    foreach:
    - loom
    - cgpm-hydrated
    - sppl-hydrated
    - ctgan
    - tvae
    do:
      cmd: >
        poetry run marginal_fits
        --real_data data/discretized-test.parquet
        --model ${item}
      deps:
      - data/discretized-test.parquet
      - data/discretized-synthetic-data-${item}.parquet
      outs:
      - qc/marginals/${item}_1d_fits.csv
      - qc/marginals/${item}_2d_fits.csv

  marginal-fits-plot:
    cmd: >
      poetry run marginal-fits-plot
      -m cgpm-hydrated
      -m loom
      -m sppl-hydrated
      -m ctgan
      -m tvae
    deps:
    - qc/marginals/ctgan_1d_fits.csv
    - qc/marginals/ctgan_2d_fits.csv
    - qc/marginals/cgpm-hydrated_1d_fits.csv
    - qc/marginals/cgpm-hydrated_2d_fits.csv
    outs:
    - qc/marginals/1d_fits.csv
    - qc/marginals/2d_fits.csv

  dependence-probability:
    foreach:
    - hydrated
    do:
      cmd: poetry run dependence-probability --model_dir data/cgpm/${item} --out_file
        qc/cgpm-${item}-dependence-probability.csv
      deps:
      - data/cgpm/${item}
      outs:
      - qc/cgpm-${item}-dependence-probability.csv