stages:
  preprocess:
    cmd: >
      poetry run preprocess
      --data data/data.csv
      --output data/preprocessed.csv
      --sql "$(yq '.sql_preprocessing' params.yaml)"
    deps:
      - data/data.csv
    outs:
      - data/preprocessed.csv

  create-column-models:
    cmd: >
      poetry run create-column-models
      --data data/preprocessed.csv
      --output data/column_models.json
    deps:
      - data/preprocessed.csv
    outs:
      - data/column_models.json

  loom-schema:
    cmd: >
      poetry run loom_schema
      --column_models data/column_models.json
      --output data/loom-schema.json
    deps:
      - data/column_models.json
    outs:
      - data/loom-schema.json

  loom-ingest:
    cmd: ./bin/loom_task ingest loom data/loom-schema.json data/preprocessed.csv
    deps:
      - data/loom-schema.json
      - data/preprocessed.csv
    outs:
      - loom/ingest
      - loom/query

  loom-infer-config:
    cmd: >
      yq -o=json '.loom' params.yaml
      > data/infer-config.json
    outs:
      - data/infer-config.json

  loom-infer:
    cmd: ./bin/loom_task infer loom ${sample_count} data/infer-config.json
    deps:
      - loom/ingest
      - loom/query
      - data/infer-config.json
    params:
      - sample_count
    outs:
      - loom/samples

  loom-sample:
    cmd: >
      ./bin/loom python scripts/loom_sample.py
      --sample_count $(yq '.qc.sample_count' params.yaml)
      --output data/synthetic-data-loom.csv
    deps:
      - loom/samples
      - scripts/loom_sample.py
    outs:
      - data/synthetic-data-loom.csv

  loom-dump-metadata:
    cmd: >
      find loom/samples -type f ! -name '*.json' |
      parallel ${parallel.flags}
      "./bin/loom python scripts/loom_to_json.py loom_to_json {}"
    params:
      - parallel.flags
    deps:
      - loom/samples